// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum ProblemDifficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id                           String    @id @default(uuid())
  name                         String?
  email                        String    @unique
  avatar                       String?
  role                         UserRole  @default(USER)
  password                     String
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt
  isEmailVerified              Boolean   @default(false)
  emailVerificationToken       String?
  emailVerificationTokenExpiry DateTime?
  forgotPasswordToken          String?
  forgotPasswordTokenExpiry    DateTime?

  problems      Problem[]
  submission    Submissions[]
  testCases     TestCases[]
  problemSolved ProblemsSolved[]
  problemLists  ProblemList[]
  dailyProblems UserDailyChallengeSubmission[]
}

model Problem {
  id                String            @id @default(uuid())
  title             String
  description       String
  difficulty        ProblemDifficulty
  tags              String[]
  userId            String
  examples          Json
  constraints       String
  hints             String[]
  editorial         String?
  testCases         Json
  codeSnippets      Json
  referenceSolution Json
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  user            User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission      Submissions[]
  hiddenTestCases TestCases[]
  problemSolved   ProblemsSolved[]
  problemLists    ProblemInProblemList[]
  dailyProblems   DailyChallenge[]
}

model Submissions {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    String
  language      String
  stdin         String?
  stdout        String?
  stdError      String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problem        Problem                        @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user           User                           @relation(fields: [userId], references: [id], onDelete: Cascade)
  dailyChallenge UserDailyChallengeSubmission[]
}

model TestCases {
  id        String @id @default(uuid())
  problemId String
  stdin     String
  stdout    String
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProblemsSolved {
  id        String   @id @default(uuid())
  problemId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model ProblemList {
  id String @id @default(uuid())

  name        String
  description String?
  userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems ProblemInProblemList[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProblemInProblemList {
  id            String   @id @default(uuid())
  problemListId String
  problemId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  problemList ProblemList @relation(fields: [problemListId], references: [id], onDelete: Cascade)
  problem     Problem     @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([problemListId, problemId])
}

model DailyChallenge {
  id        String   @id @default(uuid())
  problemId String
  date      DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model UserDailyChallengeSubmission {
  id           String   @id @default(uuid())
  userId       String
  date         DateTime @default(now())
  submissionId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission Submissions @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum ProblemDifficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id                           String    @id @default(uuid())
  name                         String?
  email                        String    @unique
  avatar                       String?
  role                         UserRole  @default(USER)
  password                     String
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt
  isEmailVerified              Boolean   @default(false)
  emailVerificationToken       String?
  emailVerificationTokenExpiry DateTime?
  forgotPasswordToken          String?
  forgotPasswordTokenExpiry    DateTime?

  problems             Problem[]
  submission           Submissions[]
  testCases            TestCases[]
  problemSolved        ProblemsSolved[]
  problemLists         ProblemList[]
  dailyProblems        UserDailyChallengeSubmission[]
  // contestRatings ContestRating[]
  contestsParticipated ContestParticipation[]
  contestSubmissions   ContestSubmission[]
}

model Problem {
  id          String            @id @default(uuid())
  title       String
  description String
  difficulty  ProblemDifficulty
  tags        String[]
  companies   String[]
  userId      String
  examples    Json
  constraints String
  hints       String[]
  editorial   String?
  testCases   Json

  codeSnippets Json

  referenceSolutionHeader Json
  referenceSolution       Json
  referenceSolutionFooter Json
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  isPublic                Boolean  @default(false)

  user            User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission      Submissions[]
  hiddenTestCases TestCases[]
  problemSolved   ProblemsSolved[]
  problemLists    ProblemInProblemList[]
  dailyProblems   DailyChallenge[]
  contestProblems ContestProblem[]
}

model Submissions {
  id              String  @id @default(uuid())
  userId          String
  problemId       String
  sourceCode      String
  language        String
  stdin           String?
  stdout          String?
  stdError        String?
  compileOutput   String?
  message         String?
  status          String
  memory          String?
  time            String?
  codeReview      String?
  timeComplexity  String?
  spaceComplexity String?
  isAccepted      Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problem           Problem                        @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user              User                           @relation(fields: [userId], references: [id], onDelete: Cascade)
  dailyChallenge    UserDailyChallengeSubmission[]
  contestSubmission ContestSubmission?
}

model TestCases {
  id        String @id @default(uuid())
  problemId String
  stdin     String
  stdout    String
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProblemsSolved {
  id        String   @id @default(uuid())
  problemId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model ProblemList {
  id String @id @default(uuid())

  title       String
  description String?
  userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems ProblemInProblemList[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProblemInProblemList {
  id            String   @id @default(uuid())
  problemListId String
  problemId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String

  problemList ProblemList @relation(fields: [problemListId], references: [id], onDelete: Cascade)
  problem     Problem     @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([problemListId, problemId])
}

model DailyChallenge {
  id        String   @id @default(uuid())
  problemId String
  date      DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model UserDailyChallengeSubmission {
  id           String   @id @default(uuid())
  userId       String
  date         DateTime @default(now())
  submissionId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission Submissions @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// model ContestRating {
//   id          String   @id @default(uuid())
//   userId      String   
//   rating      Int
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model Contest {
  id                 String   @id @default(uuid())
  title              String
  description        String?
  startTime          DateTime
  endTime            DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  isRankingCompleted Boolean  @default(false)

  problems       ContestProblem[]
  participations ContestParticipation[]
  submissions    ContestSubmission[]
}

model ContestProblem {
  id           String   @id @default(uuid())
  contestId    String
  problemId    String
  problemIndex String
  points       Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  contest            Contest             @relation(fields: [contestId], references: [id], onDelete: Cascade)
  problem            Problem             @relation(fields: [problemId], references: [id], onDelete: Cascade)
  contestSubmissions ContestSubmission[]

  @@unique([contestId, problemId])
}

model ContestParticipation {
  id        String   @id @default(uuid())
  userId    String
  contestId String
  score     Int      @default(0)
  rank      Int?
  rating    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@unique([userId, contestId])
}

model ContestSubmission {
  id               String @id @default(uuid())
  userId           String
  contestId        String
  contestProblemId String
  submissionId     String @unique
  status           String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest        Contest        @relation(fields: [contestId], references: [id], onDelete: Cascade)
  contestProblem ContestProblem @relation(fields: [contestProblemId], references: [id], onDelete: Cascade)
  submission     Submissions    @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}
